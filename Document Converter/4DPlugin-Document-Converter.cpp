/* --------------------------------------------------------------------------------
 #
 #  4DPlugin-Document-Converter.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : Document Converter
 #	author : miyako
 #	2020/09/04
 #  
 # --------------------------------------------------------------------------------*/

#include "4DPlugin-Document-Converter.h"

#pragma mark -

void PluginMain(PA_long32 selector, PA_PluginParameters params) {
    
	try
	{
        switch(selector)
        {
			// --- Document Converter
            
			case 1 :
				Convert_document(params);
				break;

        }

	}
	catch(...)
	{

	}
}

#pragma mark -

#if VERSIONMAC
void parseData(ConverterContext *context)
{
    NSError *error = nil;
    NSAttributedString *dst = [[NSAttributedString alloc]initWithData:context->src
                                                                                                                        options:context->src_options
                                                                                                 documentAttributes:NULL
                                                                                                                            error:&error];
    if(dst)
    {
        if([[context->dst_options valueForKey:NSDocumentTypeDocumentAttribute]isEqualToString:NSPlainTextDocumentType])
        {
            context->dst = [[dst string]dataUsingEncoding:NSUTF8StringEncoding];
                        
            //err:517
            /*
            context->dst = [dst dataFromRange:NSMakeRange(0, [dst length])
                                         documentAttributes:@{NSDocumentTypeDocumentAttribute:NSPlainTextDocumentType}
                                                                    error:&error];
             */

        }else
        {
            context->dst = [dst dataFromRange:NSMakeRange(0, [dst length])
                                         documentAttributes:context->dst_options
                                                                    error:&error];
        }
        
        [dst release];
    }

}
#endif
static void Convert_document(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
#if VERSIONMAC
    @autoreleasepool
    {
        int src_fmt = (int)PA_GetLongParameter(params, 2);
        int dst_fmt = (int)PA_GetLongParameter(params, 3);
        
        PA_Handle hParam1 = PA_GetBlobHandleParameter(params, 1);
        
        if(hParam1)
        {
            NSData *src = [[NSData alloc]initWithBytes:PA_LockHandle(hParam1) length:PA_GetHandleSize(hParam1)];
            if(src)
            {
                ConverterContext context;
                
                NSMutableDictionary *src_options;//read
                NSMutableDictionary *dst_options;//write
                
                /*
                 defaults for src:
                 NSDocumentTypeDocumentAttribute:NSPlainTextDocumentType
                 NSTimeoutDocumentOption:60.0f
                 */
                
                src_options = [[NSMutableDictionary alloc]initWithObjects:@[
                                                                                                                                        NSPlainTextDocumentType,
                                                                                                                                        [NSNumber numberWithFloat:60.0f]
                                                                                                                                        ]
                                                                                                                    forKeys:@[
                                                                                                                                        NSDocumentTypeDocumentAttribute,
                                                                                                                                        NSTimeoutDocumentOption
                                                                                                                                        ]];
                /*
                 defaults for dst:
                 NSDocumentTypeDocumentAttribute:NSPlainTextDocumentType
                 */
                
                dst_options = [[NSMutableDictionary alloc]initWithObjects:@[
                                                                                                                                        NSPlainTextDocumentType
                                                                                                                                        ]
                                                                                                                    forKeys:@[
                                                                                                                                        NSDocumentTypeDocumentAttribute
                                                                                                                                        ]];
                switch (dst_fmt)
                {
                    case Document_format_HTML:
                        [dst_options setObject:NSHTMLTextDocumentType forKey:NSDocumentTypeDocumentAttribute];
                        break;
                    case Document_format_RTF:
                        [dst_options setObject:NSRTFTextDocumentType forKey:NSDocumentTypeDocumentAttribute];
                        break;
                    case Document_format_RTFD:
                        [dst_options setObject:NSRTFDTextDocumentType forKey:NSDocumentTypeDocumentAttribute];
                        break;
                    case Document_format_DOC:
                        [dst_options setObject:NSDocFormatTextDocumentType forKey:NSDocumentTypeDocumentAttribute];
                        break;
                    case Document_format_DOCX:
                        [dst_options setObject:NSOfficeOpenXMLTextDocumentType forKey:NSDocumentTypeDocumentAttribute];
                        break;
                    case Document_format_ODT:
                        [dst_options setObject:NSOpenDocumentTextDocumentType forKey:NSDocumentTypeDocumentAttribute];
                        break;
                    case Document_format_WORDML:
                        [dst_options setObject:NSWordMLTextDocumentType forKey:NSDocumentTypeDocumentAttribute];
                        break;
                    case Document_format_WEBARCHIVE:
                        [dst_options setObject:NSWebArchiveTextDocumentType forKey:NSDocumentTypeDocumentAttribute];
                        break;
                }
                
                //custom option for src and dst
                
                PA_ObjectRef json = PA_GetObjectParameter(params, 4);
                
                if(json) {
                    
                    CUTF8String _author;
                    if(ob_get_s(json, L"author", &_author)){
                        [dst_options
                         setValue:[NSString stringWithUTF8String:(const char *)_author.c_str()]
                         forKey:NSAuthorDocumentAttribute];
                    }
                    
                    CUTF8String _copyright;
                    if(ob_get_s(json, L"copyright", &_copyright)){
                        [dst_options
                         setValue:[NSString stringWithUTF8String:(const char *)_copyright.c_str()]
                         forKey:NSCopyrightDocumentAttribute];
                    }
                    
                    CUTF8String _company;
                    if(ob_get_s(json, L"company", &_company)){
                        [dst_options
                         setValue:[NSString stringWithUTF8String:(const char *)_company.c_str()]
                         forKey:NSCompanyDocumentAttribute];
                    }
                    
                    CUTF8String _manager;
                    if(ob_get_s(json, L"manager", &_manager)){
                        [dst_options
                         setValue:[NSString stringWithUTF8String:(const char *)_manager.c_str()]
                         forKey:NSManagerDocumentAttribute];
                    }
                    
                    CUTF8String _editor;
                    if(ob_get_s(json, L"editor", &_editor)){
                        [dst_options
                         setValue:[NSString stringWithUTF8String:(const char *)_editor.c_str()]
                         forKey:NSEditorDocumentAttribute];
                    }
                    
                    CUTF8String _title;
                    if(ob_get_s(json, L"title", &_title)){
                        [dst_options
                         setValue:[NSString stringWithUTF8String:(const char *)_title.c_str()]
                         forKey:NSTitleDocumentAttribute];
                    }
                    
                    CUTF8String _subject;
                    if(ob_get_s(json, L"subject", &_subject)){
                        [dst_options
                         setValue:[NSString stringWithUTF8String:(const char *)_subject.c_str()]
                         forKey:NSSubjectDocumentAttribute];
                    }
                    
                    CUTF8String _category;
                    if(ob_get_s(json, L"category", &_category)){
                        [dst_options
                         setValue:[NSString stringWithUTF8String:(const char *)_category.c_str()]
                         forKey:NSCategoryDocumentAttribute];
                    }
                    
                    CUTF8String _comment;
                    if(ob_get_s(json, L"comment", &_comment)){
                        [dst_options
                         setValue:[NSString stringWithUTF8String:(const char *)_comment.c_str()]
                         forKey:NSCommentDocumentAttribute];
                    }
                    
                    CUTF8String _textEncodingName;
                    if(ob_get_s(json, L"textEncodingName", &_textEncodingName)){
                        [dst_options
                         setValue:[NSString stringWithUTF8String:(const char *)_textEncodingName.c_str()]
                         forKey:NSTextEncodingNameDocumentAttribute];
                    }
                    
                    if(ob_is_defined(json, L"topMargin")){
                        [dst_options setValue:[NSNumber numberWithDouble:ob_get_n(json, L"topMargin")] forKey:NSTopMarginDocumentAttribute];
                    }
                    
                    if(ob_is_defined(json, L"leftMargin")){
                        [dst_options setValue:[NSNumber numberWithDouble:ob_get_n(json, L"leftMargin")] forKey:NSLeftMarginDocumentAttribute];
                    }
                    
                    if(ob_is_defined(json, L"bottomMargin")){
                        [dst_options setValue:[NSNumber numberWithDouble:ob_get_n(json, L"bottomMargin")] forKey:NSBottomMarginDocumentAttribute];
                    }
                    
                    if(ob_is_defined(json, L"rightMargin")){
                        [dst_options setValue:[NSNumber numberWithDouble:ob_get_n(json, L"rightMargin")] forKey:NSRightMarginDocumentAttribute];
                    }
                    
                    if(ob_is_defined(json, L"converted")){
                        [dst_options setValue:[NSNumber numberWithDouble:ob_get_n(json, L"converted")] forKey:NSConvertedDocumentAttribute];
                    }
                    
                    if(ob_is_defined(json, L"readOnly")){
                        [dst_options setValue:[NSNumber numberWithDouble:ob_get_n(json, L"readOnly")] forKey:NSReadOnlyDocumentAttribute];
                    }
                    
                    if(ob_is_defined(json, L"viewZoom")){
                        [dst_options setValue:[NSNumber numberWithDouble:ob_get_n(json, L"viewZoom")] forKey:NSViewZoomDocumentAttribute];
                    }
                    
                    if(ob_is_defined(json, L"viewMode")){
                        [dst_options setValue:[NSNumber numberWithDouble:ob_get_n(json, L"viewMode")] forKey:NSViewModeDocumentAttribute];
                    }
                    
                    if(ob_is_defined(json, L"hyphenationFactor")){
                        [dst_options setValue:[NSNumber numberWithDouble:ob_get_n(json, L"hyphenationFactor")] forKey:NSHyphenationFactorDocumentAttribute];
                    }
                    
                    if(ob_is_defined(json, L"defaultTabInterval")){
                        [dst_options setValue:[NSNumber numberWithDouble:ob_get_n(json, L"defaultTabInterval")] forKey:NSDefaultTabIntervalDocumentAttribute];
                    }
                    
                    if(ob_is_defined(json, L"prefixSpaces")){
                        [dst_options setValue:[NSNumber numberWithDouble:ob_get_n(json, L"prefixSpaces")] forKey:NSPrefixSpacesDocumentAttribute];
                    }
                    
                    if(ob_is_defined(json, L"cocoaVersion")){
                        [dst_options setValue:[NSNumber numberWithDouble:ob_get_n(json, L"cocoaVersion")] forKey:NSCocoaVersionDocumentAttribute];
                    }
                    
                    PA_ObjectRef _viewSize = ob_get_o(json, L"viewSize");
                    if(_viewSize){
                        [dst_options
                         setValue:[NSValue
                                   valueWithSize:NSMakeSize(
                                                            ob_get_n(_viewSize, L"width"),
                                                            ob_get_n(_viewSize, L"height"))]
                         forKey:NSViewSizeDocumentAttribute];
                    }
                    
                    PA_ObjectRef _paperSize = ob_get_o(json, L"paperSize");
                    if(_paperSize){
                        [dst_options
                         setValue:[NSValue
                                   valueWithSize:NSMakeSize(
                                                            ob_get_n(_paperSize, L"width"),
                                                            ob_get_n(_paperSize, L"height"))]
                         forKey:NSPaperSizeDocumentAttribute];
                    }
                    
                    CUTF8String _creationTime;
                    if(ob_get_s(json, L"creationTime", &_creationTime)){
                        
                        NSDateFormatter *ISO = [[NSDateFormatter alloc]init];
                        NSDateFormatter *GMT = [[NSDateFormatter alloc]init];
                        [ISO setDateFormat:@"yyyy-MM-dd'T'HH:mm:ss"];
                        [ISO setTimeZone:[NSTimeZone localTimeZone]];
                        [GMT setDateFormat:@"yyyy-MM-dd'T'HH:mm:ss'Z'"];
                        [GMT setTimeZone:[NSTimeZone timeZoneForSecondsFromGMT:0]];
                        NSString *str = [NSString stringWithUTF8String:(const char *)_textEncodingName.c_str()];
                        NSDate *date = [GMT dateFromString:str];
                        date = date ? date : [ISO dateFromString:str];
                        date = date ? date : [NSDate dateWithString:str]; //YYYY-MM-DD HH:MM:SS ±HHMM
                        if(date)
                        {
                            [dst_options setValue:date forKey:NSCreationTimeDocumentAttribute];
                        }
                        [GMT release];
                        [ISO release];
                    }
                    
                    CUTF8String _modificationDate;
                    if(ob_get_s(json, L"modificationDate", &_modificationDate)){
                        
                        NSDateFormatter *ISO = [[NSDateFormatter alloc]init];
                        NSDateFormatter *GMT = [[NSDateFormatter alloc]init];
                        [ISO setDateFormat:@"yyyy-MM-dd'T'HH:mm:ss"];
                        [ISO setTimeZone:[NSTimeZone localTimeZone]];
                        [GMT setDateFormat:@"yyyy-MM-dd'T'HH:mm:ss'Z'"];
                        [GMT setTimeZone:[NSTimeZone timeZoneForSecondsFromGMT:0]];
                        NSString *str = [NSString stringWithUTF8String:(const char *)_textEncodingName.c_str()];
                        NSDate *date = [GMT dateFromString:str];
                        date = date ? date : [ISO dateFromString:str];
                        date = date ? date : [NSDate dateWithString:str]; //YYYY-MM-DD HH:MM:SS ±HHMM
                        if(date)
                        {
                            [dst_options setValue:date forKey:NSModificationTimeDocumentAttribute];
                        }
                        [GMT release];
                        [ISO release];
                    }
                    
                    PA_ObjectRef _backgroundColor = ob_get_o(json, L"backgroundColor");
                    if(_backgroundColor){
                        [dst_options
                         setValue:[NSColor
                                   colorWithDeviceRed:ob_get_n(_backgroundColor, L"red")
                                   green:ob_get_n(_backgroundColor, L"green")
                                   blue:ob_get_n(_backgroundColor, L"blue")
                                   alpha:ob_get_n(_backgroundColor, L"alpha")
                                   ]
                         forKey:NSBackgroundColorDocumentAttribute];
                    }
                    
                    PA_CollectionRef _excludedElements = ob_get_c(json, L"excludedElements");
                    if(_excludedElements){
                        
                        NSMutableArray *arr = [[NSMutableArray alloc]initWithCapacity:PA_GetCollectionLength(_excludedElements)];
                        for(PA_long32 i = 0; i < PA_GetCollectionLength(_excludedElements);++i){
                            
                            PA_Variable v = PA_GetCollectionElement(_excludedElements, i);
                            if(PA_GetVariableKind(v) == eVK_Unistring){
                                
                                PA_Unistring u = PA_GetStringVariable(v);
                                NSString *str = [[NSString alloc]initWithCharacters:(const unichar *)u.fString length:u.fLength];
                                [arr addObject:str];
                                [str release];
                            }
                            PA_ClearVariable(&v);
                        }
                        [dst_options setValue:arr forKey:NSExcludedElementsDocumentAttribute];
                        [arr release];
                    }
                    
                    PA_CollectionRef _keywords = ob_get_c(json, L"keywords");
                    if(_keywords){
                        
                        NSMutableArray *arr = [[NSMutableArray alloc]initWithCapacity:PA_GetCollectionLength(_keywords)];
                        for(PA_long32 i = 0; i < PA_GetCollectionLength(_keywords);++i){
                            
                            PA_Variable v = PA_GetCollectionElement(_keywords, i);
                            if(PA_GetVariableKind(v) == eVK_Unistring){
                                
                                PA_Unistring u = PA_GetStringVariable(v);
                                NSString *str = [[NSString alloc]initWithCharacters:(const unichar *)u.fString length:u.fLength];
                                [arr addObject:str];
                                [str release];
                            }
                            PA_ClearVariable(&v);
                        }
                        [dst_options setValue:arr forKey:NSKeywordsDocumentAttribute];
                        [arr release];
                    }
                    
                    if(ob_is_defined(json, L"baseURL")){
                        [src_options setValue:[NSNumber numberWithDouble:ob_get_n(json, L"baseURL")] forKey:NSBaseURLDocumentOption];
                    }
                    
                    if(ob_is_defined(json, L"timeout")){
                        [src_options setValue:[NSNumber numberWithDouble:ob_get_n(json, L"timeout")] forKey:NSTimeoutDocumentOption];
                    }
                    
                    if(ob_is_defined(json, L"textSizeMultiplier")){
                        [src_options setValue:[NSNumber numberWithDouble:ob_get_n(json, L"textSizeMultiplier")] forKey:NSTextSizeMultiplierDocumentOption];
                    }

   
                }
                
                switch (src_fmt)
                {
                    case Document_format_HTML:
                        [src_options setObject:NSHTMLTextDocumentType forKey:NSDocumentTypeDocumentAttribute];
                        break;
                    case Document_format_RTF:
                        [src_options setObject:NSRTFTextDocumentType forKey:NSDocumentTypeDocumentAttribute];
                        break;
                    case Document_format_RTFD:
                        [src_options setObject:NSRTFDTextDocumentType forKey:NSDocumentTypeDocumentAttribute];
                        break;
                    case Document_format_DOC:
                        [src_options setObject:NSDocFormatTextDocumentType forKey:NSDocumentTypeDocumentAttribute];
                        break;
                    case Document_format_DOCX:
                        [src_options setObject:NSOfficeOpenXMLTextDocumentType forKey:NSDocumentTypeDocumentAttribute];
                        break;
                    case Document_format_ODT:
                        [src_options setObject:NSOpenDocumentTextDocumentType forKey:NSDocumentTypeDocumentAttribute];
                        break;
                    case Document_format_WORDML:
                        [src_options setObject:NSWordMLTextDocumentType forKey:NSDocumentTypeDocumentAttribute];
                        break;
                    case Document_format_WEBARCHIVE:
                        [src_options setObject:NSWebArchiveTextDocumentType forKey:NSDocumentTypeDocumentAttribute];
                        break;
                }
                
                context.src = src;
                context.dst = nil;
                context.src_options = src_options;
                context.dst_options = dst_options;
                
//                NSLog(@"src_options:\n%@\n", src_options);
//                NSLog(@"dst_options:\n%@\n", dst_options);
                
                PA_RunInMainProcess((PA_RunInMainProcessProcPtr)parseData, (void *)&context);
                
                NSData *dst = context.dst;
                
                if(dst)
                {
                    if([dst length])
                    {
                        PA_ReturnBlob(params, (void *)[dst bytes], (PA_long32)[dst length]);
                        /*
                        PA_Handle *hReturnValue = (PA_Handle *)pResult;
                        PA_Handle d = PA_NewHandle((PA_long32)[dst length]);
                        PA_MoveBlock((char *)[dst bytes], PA_LockHandle(d), (unsigned int)[dst length]);
                        PA_UnlockHandle(d);
                        *hReturnValue = d;
                        */
                    }//dst.length
                    
                }//dst (we don't own this object, don't release it)
                
                [src_options release];
                [dst_options release];
                
                [src release];
            }//src
            PA_UnlockHandle(hParam1);
        }//hParam1
        
    }//autoreleasepool
#else
    PA_ReturnBlob(params, (void *)"", 0);
#endif
}
